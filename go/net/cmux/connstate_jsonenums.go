// generated by jsonenums -type ConnStateHook; DO NOT EDIT

package cmux

import (
	"encoding/json"
	"fmt"
)

var (
	_ConnStateNameToValue = map[string]ConnState{
		"ConnStateNew":      ConnStateNew,
		"ConnStateActive":   ConnStateActive,
		"ConnStateIdle":     ConnStateIdle,
		"ConnStateHijacked": ConnStateHijacked,
		"ConnStateClosed":   ConnStateClosed,
	}

	_ConnStateValueToName = map[ConnState]string{
		ConnStateNew:      "ConnStateNew",
		ConnStateActive:   "ConnStateActive",
		ConnStateIdle:     "ConnStateIdle",
		ConnStateHijacked: "ConnStateHijacked",
		ConnStateClosed:   "ConnStateClosed",
	}
)

func init() {
	var v ConnState
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ConnStateNameToValue = map[string]ConnState{
			interface{}(ConnStateNew).(fmt.Stringer).String():      ConnStateNew,
			interface{}(ConnStateActive).(fmt.Stringer).String():   ConnStateActive,
			interface{}(ConnStateIdle).(fmt.Stringer).String():     ConnStateIdle,
			interface{}(ConnStateHijacked).(fmt.Stringer).String(): ConnStateHijacked,
			interface{}(ConnStateClosed).(fmt.Stringer).String():   ConnStateClosed,
		}
	}
}

// MarshalJSON is generated so ConnStateHook satisfies json.Marshaler.
func (r ConnState) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ConnStateValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ConnStateHook: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ConnStateHook satisfies json.Unmarshaler.
func (r *ConnState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ConnStateHook should be a string, got %s", data)
	}
	v, ok := _ConnStateNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ConnStateHook %q", s)
	}
	*r = v
	return nil
}
