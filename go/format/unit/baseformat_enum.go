// Code generated by "go-enum -type BaseFormat -trimprefix=BaseFormat"; DO NOT EDIT.

package unit

import (
	"database/sql"
	"database/sql/driver"
	"encoding"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BaseFormatDecimal-1000]
	_ = x[BaseFormatBinary-1024]
}

const (
	_BaseFormat_name_0 = "Decimal"
	_BaseFormat_name_1 = "Binary"
)

func (i BaseFormat) String() string {
	switch {
	case i == 1000:
		return _BaseFormat_name_0
	case i == 1024:
		return _BaseFormat_name_1
	default:
		return "BaseFormat(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

var _BaseFormat_values = []BaseFormat{1000, 1024}

var _BaseFormat_name_to_values = map[string]BaseFormat{
	_BaseFormat_name_0[0:7]: 1000,
	_BaseFormat_name_1[0:6]: 1024,
}

// ParseBaseFormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParseBaseFormatString(s string) (BaseFormat, error) {
	if val, ok := _BaseFormat_name_to_values[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%[1]s does not belong to BaseFormat values", s)
}

// BaseFormatValues returns all values of the enum
func BaseFormatValues() []BaseFormat {
	return _BaseFormat_values
}

// IsABaseFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BaseFormat) Registered() bool {
	for _, v := range _BaseFormat_values {
		if i == v {
			return true
		}
	}
	return false
}

func _() {
	var _nil_BaseFormat_value = func() (val BaseFormat) { return }()

	// An "cannot convert BaseFormat literal (type BaseFormat) to type encoding.BinaryMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryMarshaler = &_nil_BaseFormat_value

	// An "cannot convert BaseFormat literal (type BaseFormat) to type encoding.BinaryUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryUnmarshaler = &_nil_BaseFormat_value
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for BaseFormat
func (i BaseFormat) MarshalBinary() (data []byte, err error) {
	return []byte(i.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for BaseFormat
func (i *BaseFormat) UnmarshalBinary(data []byte) error {
	var err error
	*i, err = ParseBaseFormatString(string(data))
	return err
}

func _() {
	var _nil_BaseFormat_value = func() (val BaseFormat) { return }()

	// An "cannot convert BaseFormat literal (type BaseFormat) to type json.Marshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Marshaler = _nil_BaseFormat_value

	// An "cannot convert BaseFormat literal (type BaseFormat) to type encoding.Unmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Unmarshaler = &_nil_BaseFormat_value
}

// MarshalJSON implements the json.Marshaler interface for BaseFormat
func (i BaseFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BaseFormat
func (i *BaseFormat) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BaseFormat should be a string, got %[1]s", data)
	}

	var err error
	*i, err = ParseBaseFormatString(s)
	return err
}

func _() {
	var _nil_BaseFormat_value = func() (val BaseFormat) { return }()

	// An "cannot convert BaseFormat literal (type BaseFormat) to type encoding.TextMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextMarshaler = _nil_BaseFormat_value

	// An "cannot convert BaseFormat literal (type BaseFormat) to type encoding.TextUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextUnmarshaler = &_nil_BaseFormat_value
}

// MarshalText implements the encoding.TextMarshaler interface for BaseFormat
func (i BaseFormat) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for BaseFormat
func (i *BaseFormat) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParseBaseFormatString(string(text))
	return err
}

//func _() {
//	var _nil_BaseFormat_value = func() (val BaseFormat) { return }()
//
//	// An "cannot convert BaseFormat literal (type BaseFormat) to type yaml.Marshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Marshaler = _nil_BaseFormat_value
//
//	// An "cannot convert BaseFormat literal (type BaseFormat) to type yaml.Unmarshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Unmarshaler = &_nil_BaseFormat_value
//}

// MarshalYAML implements a YAML Marshaler for BaseFormat
func (i BaseFormat) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for BaseFormat
func (i *BaseFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ParseBaseFormatString(s)
	return err
}

func _() {
	var _nil_BaseFormat_value = func() (val BaseFormat) { return }()

	// An "cannot convert BaseFormat literal (type BaseFormat) to type driver.Valuer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ driver.Valuer = _nil_BaseFormat_value

	// An "cannot convert BaseFormat literal (type BaseFormat) to type sql.Scanner" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ sql.Scanner = &_nil_BaseFormat_value
}

func (i BaseFormat) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *BaseFormat) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ParseBaseFormatString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// BaseFormatSliceContains reports whether sunEnums is within enums.
func BaseFormatSliceContains(enums []BaseFormat, sunEnums ...BaseFormat) bool {
	var seenEnums = map[BaseFormat]bool{}
	for _, e := range sunEnums {
		seenEnums[e] = false
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			seenEnums[v] = true
		}
	}

	for _, seen := range seenEnums {
		if !seen {
			return false
		}
	}

	return true
}

// BaseFormatSliceContainsAny reports whether any sunEnum is within enums.
func BaseFormatSliceContainsAny(enums []BaseFormat, sunEnums ...BaseFormat) bool {
	var seenEnums = map[BaseFormat]struct{}{}
	for _, e := range sunEnums {
		seenEnums[e] = struct{}{}
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			return true
		}
	}

	return false
}
